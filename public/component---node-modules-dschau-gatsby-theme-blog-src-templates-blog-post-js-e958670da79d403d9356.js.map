{"version":3,"sources":["webpack:///./node_modules/@dschau/gatsby-theme-blog/src/components/tags.js","webpack:///./node_modules/@dschau/gatsby-theme-blog/src/components/about.js","webpack:///./node_modules/@dschau/gatsby-theme-blog/src/templates/blog-post.js","webpack:///./node_modules/@dschau/gatsby-theme-blog/src/components/post-title.js","webpack:///./node_modules/@dschau/gatsby-theme-blog/src/components/date.js","webpack:///./node_modules/@dschau/gatsby-theme-blog/src/components/post-toolbar.js","webpack:///./node_modules/@dschau/gatsby-theme-blog/src/components/link.js","webpack:///./node_modules/@dschau/gatsby-theme-blog/src/components/post.js"],"names":["TagsContainer","Tag","rhythm","props","getColorFromString","Link","TagsHeader","TagList","list","tags","tag","key","title","to","Container","Image","Details","Name","Last","Description","About","image","BlogPost","data","pageContext","post","next","prev","description","meta","name","content","rawDate","className","html","date","linkTo","childImageSharp","pageQuery","TitleContainer","toStyle","Title","StyledLink","PostTitle","children","PostDate","DateDisplay","ToolbarContainer","PostToolbar","isPost","color","getColors","Post","PostContents","PostContent","Divider","ListIcon","AllPostsContainer","__html","rest","truthy","falsy","undefined","dangerouslySetInnerHTML"],"mappings":"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","file":"component---node-modules-dschau-gatsby-theme-blog-src-templates-blog-post-js-e958670da79d403d9356.js","sourcesContent":["import React from 'react'\nimport styled from '@emotion/styled'\nimport GatsbyLink from 'gatsby-link'\n\nimport { rhythm } from '../utils/typography'\nimport { getColorFromString } from '../utils/color'\n\nconst TagsContainer = styled.ul`\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  width: 100%;\n`\n\nconst Tag = styled.li`\n  display: inline-block;\n  margin: ${rhythm(1 / 4)} ${rhythm(1 / 4)};\n  padding: ${rhythm(1 / 6)} ${rhythm(1 / 2)};\n  background-color: ${props => getColorFromString(props.title, 92.5, 35)};\n  border: 2px solid ${props => getColorFromString(props.title, 92.5, 35)};\n  color: ${props => getColorFromString(props.title, 35, 40)};\n  transition: all 150ms ease-in-out;\n  font-size: ${rhythm(1 / 2)};\n  font-weight: bold;\n  &:first-of-type {\n    margin-left: 0;\n  }\n  &:hover {\n    background-color: transparent;\n    border-color: ${props => getColorFromString(props.title, 35, 40)};\n  }\n`\n\nconst Link = styled(GatsbyLink)`\n  color: inherit;\n  text-decoration: none;\n`\n\nconst TagsHeader = styled.h3`\n  display: block;\n  text-transform: uppercase;\n  margin: 0;\n  padding-top: ${rhythm(1 / 4)};\n  font-size: ${rhythm(1 / 2)};\n  line-height: ${rhythm(1)};\n`\n\nexport default function TagList({ list: tags = [] }) {\n  if (!tags || tags.length === 0) {\n    return null\n  }\n  return (\n    <TagsContainer>\n      <TagsHeader>More about&hellip;</TagsHeader>\n      {tags.map(tag => (\n        <Tag key={tag} title={tag}>\n          <Link to={`/tags/${tag}`}>{tag}</Link>\n        </Tag>\n      ))}\n    </TagsContainer>\n  )\n}\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport GatsbyImage from 'gatsby-image'\n\nimport { rhythm } from '../utils/typography'\nimport SocialIcons from './social-icons'\n\nconst Container = styled.div`\n  display: flex;\n  margin: ${rhythm(1)} auto;\n  margin-bottom: 0;\n  justify-content: space-between;\n  align-items: center;\n  position: relative;\n  @media only screen and (min-width: 768px) {\n    max-width: 75%;\n  }\n`\n\nconst Image = styled(GatsbyImage)`\n  border-radius: 100%;\n`\n\nconst Details = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  margin: 0 ${rhythm(1 / 2)};\n  @media only screen and (min-width: 768px) {\n    margin: 0 ${rhythm(1)};\n  }\n`\n\nconst Name = styled.h1`\n  margin: 0;\n  padding: 0;\n  padding-bottom: ${rhythm(1 / 4)};\n  font-size: ${rhythm(1)};\n  color: #002635;\n  text-transform: uppercase;\n  line-height: ${rhythm(1)};\n`\n\nconst Last = styled.span`\n  font-weight: 400;\n`\n\nconst Description = styled.p`\n  margin-bottom: 0;\n  color: #444;\n`\n\nexport default function About({ image }) {\n  return (\n    <Container>\n      {image && (\n        <div>\n          <Image {...image} />\n        </div>\n      )}\n      <Details>\n        <Name>\n          Dustin <Last>Schau</Last>\n        </Name>\n        <Description>\n          Front-end development is my passion, and I am incredibly lucky to be\n          able to <strong>love</strong> what I do each and every day.\n        </Description>\n      </Details>\n      <SocialIcons />\n    </Container>\n  )\n}\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { graphql } from 'gatsby'\n\nimport Post from '../components/post'\nimport Tags from '../components/tags'\nimport About from '../components/about'\nimport SEO from '../components/seo'\n\nimport { fadeInBottom } from '../style/animations'\n\nimport 'prism-themes/themes/prism-atom-dark.css'\n\nconst Container = styled.div`\n  max-width: 100%;\n  transform: translateY(16px) scale(0.99);\n  transform-origin: 50% 0;\n  opacity: 0;\n  animation: ${fadeInBottom} 0.3s cubic-bezier(0.39, 0.575, 0.565, 1) forwards;\n\n  twitterwidget,\n  .twitter-tweet {\n    margin: 1rem auto;\n  }\n`\n\nexport default function BlogPost({ data = {}, pageContext }) {\n  const { markdownRemark: post } = data\n  const { next, prev } = pageContext\n\n  const description = post.frontmatter.excerpt\n    ? post.frontmatter.excerpt\n    : post.excerpt\n  const image = post.frontmatter.featured\n    ? post.frontmatter.featured.image.resize\n    : null\n\n  const meta = [\n    {\n      name: `og:type`,\n      content: `article`,\n    },\n    {\n      name: `twitter:label1`,\n      content: `Reading time`,\n    },\n    {\n      name: `twitter:data1`,\n      content: `${post.timeToRead} min read`,\n    },\n    {\n      name: `article:published_time`,\n      content: post.frontmatter.rawDate,\n    },\n  ]\n\n  return (\n    <Container>\n      <SEO\n        title={post.frontmatter.title}\n        description={description}\n        image={image}\n        meta={meta}\n      />\n      <Post\n        className=\"blog-post\"\n        html={post.html}\n        date={post.frontmatter.date}\n        linkTo={post.frontmatter.link || '/'}\n        title={post.frontmatter.title}\n        next={next}\n        prev={prev}\n      >\n        <Tags list={post.frontmatter.tags} />\n        <About image={data.image.childImageSharp} />\n      </Post>\n    </Container>\n  )\n}\n\nexport const pageQuery = graphql`\n  query BlogPostByPath($slug: String!) {\n    image: file(absolutePath: { regex: \"/me.jpg/\" }) {\n      childImageSharp {\n        fixed(width: 80) {\n          ...GatsbyImageSharpFixed_withWebp\n        }\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      html\n      excerpt(pruneLength: 160)\n      timeToRead\n      fields {\n        slug\n      }\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        featured {\n          image: childImageSharp {\n            resize(width: 800) {\n              height\n              width\n              src\n            }\n          }\n        }\n        rawDate: date\n        draft\n        excerpt\n        tags\n        title\n      }\n    }\n  }\n`\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport Link from 'gatsby-link'\n\nimport { getColorFromString } from '../utils/color'\nimport { rhythm } from '../utils/typography'\n\nconst toStyle = props => {\n  if (props.to) {\n    return `\n      cursor: pointer;\n      &:hover {\n        background: ${getColorFromString(props.title, 30, 100)};\n      }\n    `\n  }\n  return ''\n}\n\nconst TitleContainer = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  z-index: 1;\n  background: ${props => getColorFromString(props.title)};\n  color: white;\n  position: relative;\n  padding-top: ${rhythm(1)};\n  padding-bottom: ${rhythm(1.5)};\n  transition: background-color 125ms ease-in-out;\n  @media only screen and (min-width: 768px) {\n    padding: ${rhythm(1.75)} 0;\n  }\n  ${props => toStyle(props)};\n`\n\nconst Title = styled.h1`\n  display: block;\n  margin: 0;\n  font-family: Bitter, Georgia, serif;\n  font-size: ${rhythm(1)};\n  line-height: ${rhythm(1.5)};\n  @media only screen and (min-width: 768px) {\n    padding: ${rhythm(1 / 2)} 0;\n    border-top: 4px solid #fff;\n    border-bottom: 4px solid #fff;\n    font-size: ${rhythm(1.5)};\n    line-height: ${rhythm(2)};\n  }\n`\n\nconst StyledLink = styled(Link)`\n  display: block;\n  color: inherit;\n  text-decoration: none;\n  width: 100%;\n`\n\nexport default function PostTitle({ children, title, to }) {\n  const Container = () => {\n    return (\n      <TitleContainer title={title} to={to}>\n        <Title className=\"post-title\">{title}</Title>\n        {children}\n      </TitleContainer>\n    )\n  }\n  if (to) {\n    return (\n      <StyledLink to={to}>\n        <Container />\n      </StyledLink>\n    )\n  }\n  return <Container />\n}\n","import React from 'react'\nimport styled from '@emotion/styled'\n\nimport { rhythm } from '../utils/typography'\n\nconst PostDate = styled.h2`\n  position: absolute;\n  bottom: 8px;\n  left: 50%;\n  transform: translateX(-50%);\n  margin: 0;\n  padding: 0;\n  color: rgba(255, 255, 255, 0.9);\n  font-size: ${rhythm(3 / 4)};\n  font-weight: 400;\n  z-index: 2;\n`\n\nexport default function DateDisplay({ date }) {\n  return <PostDate>{date}</PostDate>\n}\n","import React from 'react'\nimport styled from '@emotion/styled'\n\nimport { rhythm } from '../utils/typography'\n\nimport NavigationButton from './navigation-button'\nimport PostDate from './date'\n\nconst ToolbarContainer = styled.div`\n  display: flex;\n  padding-bottom: ${rhythm(1 / 4)};\n`\n\nexport default function PostToolbar({ date, isPost, next, prev, title }) {\n  const Buttons = () => {\n    if (isPost) {\n      return (\n        <div>\n          {prev && (\n            <NavigationButton title={title} to={prev.fields.slug} prev>\n              {prev.frontmatter.title}\n            </NavigationButton>\n          )}\n          {next && (\n            <NavigationButton title={title} to={next.fields.slug} next>\n              {next.frontmatter.title}\n            </NavigationButton>\n          )}\n        </div>\n      )\n    }\n    return null\n  }\n  return (\n    <ToolbarContainer>\n      <Buttons />\n      <PostDate date={date} />\n    </ToolbarContainer>\n  )\n}\n","// eslint-disable-next-line\nimport React from 'react'\nimport styled from '@emotion/styled'\nimport { rhythm } from '../utils/typography'\nimport Link from 'gatsby-link'\n\nimport { getColorFromString } from '../utils/color'\n\nconst getColors = props => {\n  const color = getColorFromString(props.title)\n  return `\n      background-color: ${color};\n      color: white;\n      border-color: ${color};\n      &:hover {\n        color: ${color};\n        background-color: white;\n      }\n    `\n}\n\nexport default styled(Link)`\n  display: inline-block;\n  background-color: white;\n  padding: ${rhythm(1 / 3)} ${rhythm(1)};\n  font-size: ${rhythm(3 / 4)};\n  font-weight: bold;\n  text-decoration: none;\n  text-align: center;\n  text-transform: uppercase;\n  border-width: 2px;\n  border-style: solid;\n  transition: all 125ms ease-in-out;\n  ${props => getColors(props)};\n`\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { rhythm } from '../utils/typography'\nimport { MdList } from 'react-icons/md'\n\nimport PostTitle from './post-title'\nimport Toolbar from './post-toolbar'\nimport StyledLink from './link'\n\nconst Post = styled.section`\n  position: relative;\n  width: 100%;\n  background-color: white;\n  box-shadow: 0 0 4px 1px rgba(0, 0, 0, 0.2);\n  background-color: white;\n  outline: 1px solid rgba(0, 0, 0, 0.125);\n  box-shadow: 0 0 4px 1px rgba(0, 0, 0, 0.2);\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-bottom: ${rhythm(1)};\n  :last-child {\n    border-bottom-width: 0;\n  }\n  @media only screen and (min-width: 768px) {\n    margin-bottom: ${props => (props.preview ? rhythm(2) : 0)};\n    padding-bottom: ${rhythm(2)};\n  }\n\n  h1.post-title {\n    text-align: center;\n    font-weight: 700;\n    display: inline-block;\n  }\n`\n\nconst PostContents = styled.div`\n  max-width: 100%;\n  padding: ${rhythm(3 / 4)} ${rhythm(1)};\n  @media only screen and (min-width: 768px) {\n    padding: ${rhythm(1)} ${rhythm(2)};\n    padding-top: ${rhythm(1)};\n  }\n`\n\nconst PostContent = styled.div`\n  > h2 {\n    color: #333;\n    margin: ${rhythm(1 / 4)} 0;\n    padding: ${rhythm(1 / 4)} 0;\n    border-bottom: 2px solid #ddd;\n    font-weight: 400;\n  }\n\n  > h3 {\n    display: inline-block;\n    color: #444;\n    margin: ${rhythm(1 / 6)} 0;\n    padding: ${rhythm(1 / 6)};\n    padding-left: 0;\n    border-bottom: 1px solid #ddd;\n    font-weight: 400;\n  }\n\n  > p {\n    margin: ${rhythm(3 / 4)} auto;\n    color: #333;\n    line-height: ${rhythm(1.25)};\n  }\n\n  a:not(.anchor) {\n    display: inline;\n    color: #d85d15;\n    position: relative;\n    text-decoration: none;\n    padding: 2px;\n    transition: all 175ms ease-in-out;\n\n    :before,\n    :after {\n      content: '';\n      position: absolute;\n      left: 0;\n      right: 0;\n      width: 100%;\n      height: 1px;\n      background-color: #d85d15;\n    }\n\n    :after {\n      bottom: -2px;\n      transition: 200ms ease-out;\n    }\n\n    :before {\n      top: -2px;\n      transform: translateY(24px);\n      opacity: 0;\n      transition: 200ms ease-out;\n    }\n\n    :hover {\n      background-color: rgba(216, 93, 21, 0.05);\n\n      :before {\n        transform-origin: center top;\n        transform: translateY(0) scaleX(1.025);\n        opacity: 1;\n      }\n\n      :after {\n        transform-origin: center bottom;\n        transform: scaleX(1.025);\n      }\n    }\n  }\n\n  > blockquote {\n    margin-left: 0.75rem;\n    padding-left: 1.5rem;\n    border-left: 4px solid #ddd;\n  }\n\n  > video.responsive {\n    max-width: 100%;\n    max-height: 100%;\n  }\n\n  .gatsby-code-title {\n    margin-bottom: -0.6rem;\n    padding: 0.5em 1em;\n    font-family: Consolas, 'Andale Mono WT', 'Andale Mono', 'Lucida Console',\n      'Lucida Sans Typewriter', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono',\n      'Liberation Mono', 'Nimbus Mono L', Monaco, 'Courier New', Courier,\n      monospace;\n\n    background-color: black;\n    color: white;\n    z-index: 0;\n\n    border-top-left-radius: 0.3em;\n    border-top-right-radius: 0.3em;\n  }\n\n  .gatsby-code-title + .gatsby-highlight {\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n  }\n\n  .gatsby-highlight-code-line {\n    background-color: #0e0e0e;\n    display: block;\n    margin-right: -1em;\n    margin-left: -1em;\n    padding-right: 1em;\n    padding-left: 0.75em;\n    border-left: 0.25em solid #96cbfe;\n  }\n\n  .gatsby-highlight {\n    background-color: #1d1f21;\n    border-radius: 0.3em;\n    margin: 0.5em 0;\n    padding: 1em;\n    overflow: auto;\n  }\n\n  .gatsby-highlight pre[class*='language-'] {\n    margin: 0;\n    padding: 0;\n    overflow: initial;\n    float: left;\n    min-width: 100%;\n  }\n`\n\nconst Divider = styled.hr`\n  border: 0;\n  width: 75%;\n  margin: ${rhythm(1 / 2)} auto;\n  border-bottom: 1px solid #eee;\n`\n\nconst ListIcon = styled(MdList)`\n  font-size: 32px;\n  margin-right: 0.5rem;\n`\n\nconst AllPostsContainer = styled.span`\n  display: flex;\n  align-items: center;\n`\n\nexport default function({\n  children,\n  className,\n  date,\n  html: __html,\n  linkTo,\n  title,\n  next,\n  prev,\n  ...rest\n}) {\n  const isPost = (truthy, falsy = null) => {\n    if (linkTo === '/') {\n      return truthy\n    }\n    return falsy\n  }\n  return (\n    <Post className={[`post`].concat(className || []).join(' ')} {...rest}>\n      <PostTitle title={title} to={isPost(undefined, linkTo)}>\n        <Toolbar\n          title={title}\n          date={date}\n          isPost={isPost(true, false)}\n          linkTo={linkTo}\n          next={next}\n          prev={prev}\n        />\n      </PostTitle>\n      <PostContents>\n        <PostContent dangerouslySetInnerHTML={{ __html }} />\n        {children}\n        <Divider />\n      </PostContents>\n      <StyledLink to={linkTo} title={title}>\n        {isPost(\n          <AllPostsContainer>\n            <ListIcon />\n            All posts\n          </AllPostsContainer>,\n          'Read more'\n        )}\n      </StyledLink>\n    </Post>\n  )\n}\n"],"sourceRoot":""}