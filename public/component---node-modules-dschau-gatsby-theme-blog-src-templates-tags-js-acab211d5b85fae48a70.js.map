{"version":3,"sources":["webpack:///./node_modules/@dschau/gatsby-theme-blog/src/components/tag-header.js","webpack:///./node_modules/@dschau/gatsby-theme-blog/src/components/preview.js","webpack:///./node_modules/@dschau/gatsby-theme-blog/src/components/post-title.js","webpack:///./node_modules/@dschau/gatsby-theme-blog/src/components/date.js","webpack:///./node_modules/@dschau/gatsby-theme-blog/src/components/post-toolbar.js","webpack:///./node_modules/@dschau/gatsby-theme-blog/src/components/link.js","webpack:///./node_modules/@dschau/gatsby-theme-blog/src/components/post.js","webpack:///./node_modules/@dschau/gatsby-theme-blog/src/templates/tags.js"],"names":["Header","rhythm","text","Preview","children","excerpt","title","to","rest","html","linkTo","preview","TitleContainer","props","getColorFromString","toStyle","Title","StyledLink","PostTitle","Container","className","PostDate","DateDisplay","date","ToolbarContainer","PostToolbar","isPost","next","prev","color","getColors","Post","PostContents","PostContent","Divider","ListIcon","AllPostsContainer","__html","truthy","falsy","undefined","dangerouslySetInnerHTML","Tags","pageContext","tags","tagName","len","post","key","slug"],"mappings":"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","file":"component---node-modules-dschau-gatsby-theme-blog-src-templates-tags-js-acab211d5b85fae48a70.js","sourcesContent":["import React from 'react'\nimport styled from '@emotion/styled'\n\nimport { rhythm } from '../utils/typography'\n\nconst Header = styled.h1`\n  background-color: white;\n  color: black;\n  border-radius: ${rhythm(1)};\n  margin: ${rhythm(1)} auto;\n  padding: ${rhythm(1 / 4)};\n  text-align: center;\n  @media only screen and (min-width: 768px) {\n    max-width: 65%;\n  }\n`\n\nconst TagHeader = ({ text }) => {\n  return <Header text={text}>{text}</Header>\n}\n\nexport default TagHeader\n","import React from 'react'\n\nimport Post from './post'\n\nexport default function Preview({ children, excerpt, title, to, ...rest }) {\n  return (\n    <Post html={excerpt} title={title} linkTo={to} preview={true} {...rest}>\n      {children}\n    </Post>\n  )\n}\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport Link from 'gatsby-link'\n\nimport { getColorFromString } from '../utils/color'\nimport { rhythm } from '../utils/typography'\n\nconst toStyle = props => {\n  if (props.to) {\n    return `\n      cursor: pointer;\n      &:hover {\n        background: ${getColorFromString(props.title, 30, 100)};\n      }\n    `\n  }\n  return ''\n}\n\nconst TitleContainer = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  z-index: 1;\n  background: ${props => getColorFromString(props.title)};\n  color: white;\n  position: relative;\n  padding-top: ${rhythm(1)};\n  padding-bottom: ${rhythm(1.5)};\n  transition: background-color 125ms ease-in-out;\n  @media only screen and (min-width: 768px) {\n    padding: ${rhythm(1.75)} 0;\n  }\n  ${props => toStyle(props)};\n`\n\nconst Title = styled.h1`\n  display: block;\n  margin: 0;\n  font-family: Bitter, Georgia, serif;\n  font-size: ${rhythm(1)};\n  line-height: ${rhythm(1.5)};\n  @media only screen and (min-width: 768px) {\n    padding: ${rhythm(1 / 2)} 0;\n    border-top: 4px solid #fff;\n    border-bottom: 4px solid #fff;\n    font-size: ${rhythm(1.5)};\n    line-height: ${rhythm(2)};\n  }\n`\n\nconst StyledLink = styled(Link)`\n  display: block;\n  color: inherit;\n  text-decoration: none;\n  width: 100%;\n`\n\nexport default function PostTitle({ children, title, to }) {\n  const Container = () => {\n    return (\n      <TitleContainer title={title} to={to}>\n        <Title className=\"post-title\">{title}</Title>\n        {children}\n      </TitleContainer>\n    )\n  }\n  if (to) {\n    return (\n      <StyledLink to={to}>\n        <Container />\n      </StyledLink>\n    )\n  }\n  return <Container />\n}\n","import React from 'react'\nimport styled from '@emotion/styled'\n\nimport { rhythm } from '../utils/typography'\n\nconst PostDate = styled.h2`\n  position: absolute;\n  bottom: 8px;\n  left: 50%;\n  transform: translateX(-50%);\n  margin: 0;\n  padding: 0;\n  color: rgba(255, 255, 255, 0.9);\n  font-size: ${rhythm(3 / 4)};\n  font-weight: 400;\n  z-index: 2;\n`\n\nexport default function DateDisplay({ date }) {\n  return <PostDate>{date}</PostDate>\n}\n","import React from 'react'\nimport styled from '@emotion/styled'\n\nimport { rhythm } from '../utils/typography'\n\nimport NavigationButton from './navigation-button'\nimport PostDate from './date'\n\nconst ToolbarContainer = styled.div`\n  display: flex;\n  padding-bottom: ${rhythm(1 / 4)};\n`\n\nexport default function PostToolbar({ date, isPost, next, prev, title }) {\n  const Buttons = () => {\n    if (isPost) {\n      return (\n        <div>\n          {prev && (\n            <NavigationButton title={title} to={prev.fields.slug} prev>\n              {prev.frontmatter.title}\n            </NavigationButton>\n          )}\n          {next && (\n            <NavigationButton title={title} to={next.fields.slug} next>\n              {next.frontmatter.title}\n            </NavigationButton>\n          )}\n        </div>\n      )\n    }\n    return null\n  }\n  return (\n    <ToolbarContainer>\n      <Buttons />\n      <PostDate date={date} />\n    </ToolbarContainer>\n  )\n}\n","// eslint-disable-next-line\nimport React from 'react'\nimport styled from '@emotion/styled'\nimport { rhythm } from '../utils/typography'\nimport Link from 'gatsby-link'\n\nimport { getColorFromString } from '../utils/color'\n\nconst getColors = props => {\n  const color = getColorFromString(props.title)\n  return `\n      background-color: ${color};\n      color: white;\n      border-color: ${color};\n      &:hover {\n        color: ${color};\n        background-color: white;\n      }\n    `\n}\n\nexport default styled(Link)`\n  display: inline-block;\n  background-color: white;\n  padding: ${rhythm(1 / 3)} ${rhythm(1)};\n  font-size: ${rhythm(3 / 4)};\n  font-weight: bold;\n  text-decoration: none;\n  text-align: center;\n  text-transform: uppercase;\n  border-width: 2px;\n  border-style: solid;\n  transition: all 125ms ease-in-out;\n  ${props => getColors(props)};\n`\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { rhythm } from '../utils/typography'\nimport { MdList } from 'react-icons/md'\n\nimport PostTitle from './post-title'\nimport Toolbar from './post-toolbar'\nimport StyledLink from './link'\n\nconst Post = styled.section`\n  position: relative;\n  width: 100%;\n  background-color: white;\n  box-shadow: 0 0 4px 1px rgba(0, 0, 0, 0.2);\n  background-color: white;\n  outline: 1px solid rgba(0, 0, 0, 0.125);\n  box-shadow: 0 0 4px 1px rgba(0, 0, 0, 0.2);\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-bottom: ${rhythm(1)};\n  :last-child {\n    border-bottom-width: 0;\n  }\n  @media only screen and (min-width: 768px) {\n    margin-bottom: ${props => (props.preview ? rhythm(2) : 0)};\n    padding-bottom: ${rhythm(2)};\n  }\n\n  h1.post-title {\n    text-align: center;\n    font-weight: 700;\n    display: inline-block;\n  }\n`\n\nconst PostContents = styled.div`\n  max-width: 100%;\n  padding: ${rhythm(3 / 4)} ${rhythm(1)};\n  @media only screen and (min-width: 768px) {\n    padding: ${rhythm(1)} ${rhythm(2)};\n    padding-top: ${rhythm(1)};\n  }\n`\n\nconst PostContent = styled.div`\n  > h2 {\n    color: #333;\n    margin: ${rhythm(1 / 4)} 0;\n    padding: ${rhythm(1 / 4)} 0;\n    border-bottom: 2px solid #ddd;\n    font-weight: 400;\n  }\n\n  > h3 {\n    display: inline-block;\n    color: #444;\n    margin: ${rhythm(1 / 6)} 0;\n    padding: ${rhythm(1 / 6)};\n    padding-left: 0;\n    border-bottom: 1px solid #ddd;\n    font-weight: 400;\n  }\n\n  > p {\n    margin: ${rhythm(3 / 4)} auto;\n    color: #333;\n    line-height: ${rhythm(1.25)};\n  }\n\n  a:not(.anchor) {\n    display: inline;\n    color: #d85d15;\n    position: relative;\n    text-decoration: none;\n    padding: 2px;\n    transition: all 175ms ease-in-out;\n\n    :before,\n    :after {\n      content: '';\n      position: absolute;\n      left: 0;\n      right: 0;\n      width: 100%;\n      height: 1px;\n      background-color: #d85d15;\n    }\n\n    :after {\n      bottom: -2px;\n      transition: 200ms ease-out;\n    }\n\n    :before {\n      top: -2px;\n      transform: translateY(24px);\n      opacity: 0;\n      transition: 200ms ease-out;\n    }\n\n    :hover {\n      background-color: rgba(216, 93, 21, 0.05);\n\n      :before {\n        transform-origin: center top;\n        transform: translateY(0) scaleX(1.025);\n        opacity: 1;\n      }\n\n      :after {\n        transform-origin: center bottom;\n        transform: scaleX(1.025);\n      }\n    }\n  }\n\n  > blockquote {\n    margin-left: 0.75rem;\n    padding-left: 1.5rem;\n    border-left: 4px solid #ddd;\n  }\n\n  > video.responsive {\n    max-width: 100%;\n    max-height: 100%;\n  }\n\n  .gatsby-code-title {\n    margin-bottom: -0.6rem;\n    padding: 0.5em 1em;\n    font-family: Consolas, 'Andale Mono WT', 'Andale Mono', 'Lucida Console',\n      'Lucida Sans Typewriter', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono',\n      'Liberation Mono', 'Nimbus Mono L', Monaco, 'Courier New', Courier,\n      monospace;\n\n    background-color: black;\n    color: white;\n    z-index: 0;\n\n    border-top-left-radius: 0.3em;\n    border-top-right-radius: 0.3em;\n  }\n\n  .gatsby-code-title + .gatsby-highlight {\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n  }\n\n  .gatsby-highlight-code-line {\n    background-color: #0e0e0e;\n    display: block;\n    margin-right: -1em;\n    margin-left: -1em;\n    padding-right: 1em;\n    padding-left: 0.75em;\n    border-left: 0.25em solid #96cbfe;\n  }\n\n  .gatsby-highlight {\n    background-color: #1d1f21;\n    border-radius: 0.3em;\n    margin: 0.5em 0;\n    padding: 1em;\n    overflow: auto;\n  }\n\n  .gatsby-highlight pre[class*='language-'] {\n    margin: 0;\n    padding: 0;\n    overflow: initial;\n    float: left;\n    min-width: 100%;\n  }\n`\n\nconst Divider = styled.hr`\n  border: 0;\n  width: 75%;\n  margin: ${rhythm(1 / 2)} auto;\n  border-bottom: 1px solid #eee;\n`\n\nconst ListIcon = styled(MdList)`\n  font-size: 32px;\n  margin-right: 0.5rem;\n`\n\nconst AllPostsContainer = styled.span`\n  display: flex;\n  align-items: center;\n`\n\nexport default function({\n  children,\n  className,\n  date,\n  html: __html,\n  linkTo,\n  title,\n  next,\n  prev,\n  ...rest\n}) {\n  const isPost = (truthy, falsy = null) => {\n    if (linkTo === '/') {\n      return truthy\n    }\n    return falsy\n  }\n  return (\n    <Post className={[`post`].concat(className || []).join(' ')} {...rest}>\n      <PostTitle title={title} to={isPost(undefined, linkTo)}>\n        <Toolbar\n          title={title}\n          date={date}\n          isPost={isPost(true, false)}\n          linkTo={linkTo}\n          next={next}\n          prev={prev}\n        />\n      </PostTitle>\n      <PostContents>\n        <PostContent dangerouslySetInnerHTML={{ __html }} />\n        {children}\n        <Divider />\n      </PostContents>\n      <StyledLink to={linkTo} title={title}>\n        {isPost(\n          <AllPostsContainer>\n            <ListIcon />\n            All posts\n          </AllPostsContainer>,\n          'Read more'\n        )}\n      </StyledLink>\n    </Post>\n  )\n}\n","import React from 'react'\n\nimport Preview from '../components/preview'\nimport SEO from '../components/seo'\nimport TagHeader from '../components/tag-header'\n\nexport default function Tags({ pageContext }) {\n  const { tags, tagName } = pageContext\n  const len = tags.length\n  return (\n    <React.Fragment>\n      <SEO title={`Posts tagged with \"${tagName}\"`} />\n      <TagHeader text={`${len} post${len > 1 ? 's' : ''} about \"${tagName}\"`} />\n      {tags.map(post => (\n        <Preview\n          key={post.id}\n          html={post.frontmatter.excerpt || post.excerpt}\n          date={post.frontmatter.date}\n          title={post.frontmatter.title}\n          to={post.fields.slug}\n        />\n      ))}\n    </React.Fragment>\n  )\n}\n"],"sourceRoot":""}