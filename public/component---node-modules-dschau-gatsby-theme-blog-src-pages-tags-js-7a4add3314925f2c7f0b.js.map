{"version":3,"sources":["webpack:///./node_modules/@dschau/gatsby-theme-blog/src/components/tag-header.js","webpack:///./node_modules/@dschau/gatsby-theme-blog/src/pages/tags.js"],"names":["Header","rhythm","text","Container","List","ListItem","Tags","data","title","name","key","to","pageQuery"],"mappings":"gJAKMA,EAAM,0FAGOC,YAHP,cAIAA,YAJA,oBAKCA,YAAO,EALR,GAAZ,+EAgBA,IAJkB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACnB,OAAO,eAAQA,KAAMA,GAArB,K,qNCVIC,EAAS,sGAKTC,EAAI,uHAKGH,YALH,oBAMQA,YANR,GAAV,cASMI,EAAQ,yCAEC,SAASC,EAAK,GAAW,IAATC,EAAQ,EAARA,KAC7B,OACE,mBACE,iBAAKC,MAAM,SACX,iBAAWN,KAAK,aAChB,mBACGK,EAAA,gBAAoB,YAAe,IAAZE,EAAW,EAAXA,KACtB,OACE,eAAUC,IAAKD,GACb,oBAAME,GAAE,SAAWF,GAFvB,SAWH,IAAMG,EAAN","file":"component---node-modules-dschau-gatsby-theme-blog-src-pages-tags-js-7a4add3314925f2c7f0b.js","sourcesContent":["import React from 'react'\nimport styled from '@emotion/styled'\n\nimport { rhythm } from '../utils/typography'\n\nconst Header = styled.h1`\n  background-color: white;\n  color: black;\n  border-radius: ${rhythm(1)};\n  margin: ${rhythm(1)} auto;\n  padding: ${rhythm(1 / 4)};\n  text-align: center;\n  @media only screen and (min-width: 768px) {\n    max-width: 65%;\n  }\n`\n\nconst TagHeader = ({ text }) => {\n  return <Header text={text}>{text}</Header>\n}\n\nexport default TagHeader\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { graphql, Link } from 'gatsby'\n\nimport SEO from '../components/seo'\nimport TagHeader from '../components/tag-header'\nimport { rhythm } from '../utils/typography'\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  background-color: white;\n  width: 100%;\n  padding: ${rhythm(1)};\n  padding-left: ${rhythm(2)};\n  margin: 0;\n`\nconst ListItem = styled.li``\n\nexport default function Tags({ data }) {\n  return (\n    <Container>\n      <SEO title=\"Tags\" />\n      <TagHeader text=\"All tags\" />\n      <List>\n        {data.tags.group.map(({ name }) => {\n          return (\n            <ListItem key={name}>\n              <Link to={`/tags/${name}`}>{name}</Link>\n            </ListItem>\n          )\n        })}\n      </List>\n    </Container>\n  )\n}\n\nexport const pageQuery = graphql`\n  {\n    tags: allMarkdownRemark {\n      group(field: frontmatter___tags) {\n        name: fieldValue\n        totalCount\n      }\n    }\n  }\n`\n"],"sourceRoot":""}